"
"   Copyright 2017 Jody Foo
"
"   Licensed under the Apache License, Version 2.0 (the "License");
"   you may not use this file except in compliance with the License.
"   You may obtain a copy of the License at
"
"       http://www.apache.org/licenses/LICENSE-2.0
"
"   Unless required by applicable law or agreed to in writing, software
"   distributed under the License is distributed on an "AS IS" BASIS,
"   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
"   See the License for the specific language governing permissions and
"   limitations under the License.

" Author: Jody Foo / @fnurl / jody.foo@gmail.com


function! base16themechanger#Init()
    " Set up collections and apply the first theme. Special case for terminal."
    " load collection into g:base16themechanger#selected_collection
    call base16themechanger#InitCollection()

    " NOTE: TERM clause has been disabled using `&& 0`
    " special case if running in terminal
    if exists("$TERM") && $TERM != "" && 0
        " use the terminal's colorscheme as initial theme {{{3
        let g:base16themechanger#index=-1
        " .vimrc_background is generated by base16-shell and loads the same
        " colorscheme used in the shell (set by base16-shell) unless a 
        " colorscheme has already been loaded
        if filereadable(expand("~/.vimrc_background"))
            source ~/.vimrc_background
        endif

    " Reset theme (also applies theme) if not running in a terminal
    else
        call base16themechanger#ResetTheme()
    endif
endfunc


function! base16themechanger#InitCollection()
    let g:base16themechanger#current_collection=
        \ g:base16themechanger#collections[g:base16themechanger#current_collection_name]
endfunc


function! base16themechanger#ApplyTheme()
    " Apply the currently selected theme (colorscheme and AirlineTheme) from the
    " selected collection.

    " Can't run commands with variables as parameters, i.e.
    "
    "   :colorscheme l:base16colorscheme
    "
    " We must first create command as a string, then execute the string (i.e.
    " the VimL interpreter does not do any recursive evaluation of expressions).
    let l:colorscheme='base16-' . g:base16themechanger#current_collection[g:base16themechanger#index]
    execute ':colorscheme '  . l:colorscheme

    " NOTE: if the AirlineTheme is not set,
    " we just have to set the base16 colorsche and Airline will follow.
    "let l:airlinetheme=substitute(l:base16colorscheme, '-', '_', 'g')
    "execute ':AirlineTheme ' . l:airlinetheme
endfunc


function! base16themechanger#ResetTheme()
    " Reset the theme index and apply the initial theme.
    let g:base16themechanger#index=0
    call base16themechanger#ApplyTheme()
endfunc


function! base16themechanger#RelativeTheme(rel_index)
    " Select a theme in a collection using a relative index (+/- int).
    let g:base16themechanger#index =
        \ (g:base16themechanger#index + a:rel_index) %
        \ len(g:base16themechanger#current_collection)
    call base16themechanger#ApplyTheme()
endfunc


function! base16themechanger#NextTheme()
    " Select next theme and apply it.
    call base16themechanger#RelativeTheme(1)
endfunc


function! base16themechanger#PreviousTheme()
    " Select previous theme and apply it.
    call base16themechanger#RelativeTheme(-1)
endfunc


function! base16themechanger#SelectCollection(collection_name)
    " Select a collection and use the first theme.
    if has_key(g:base16themechanger#collections, a:collection_name)
        let g:base16themechanger#current_collection_name = a:collection_name
        call base16themechanger#Init()
    else
        echo "Collection " . a:collection_name . " does not exist."
    endif
endfunc

function! base16themechanger#AddCollection(collection_name, collection)
    " Add a collection with specified name to user's theme collection.
    let g:base16themechanger#collections[a:collection_name] = a:collection
endfunc

function! base16themechanger#DeleteCollection(collection_name)
    " Delete a named theme.
    if has_key(g:base16themechanger#collections)
        execute "unlet g:base16themechanger#collections." . a:collection_name 
        echo "Removed collection: " . a:collection_name
    else
        echo "Collection not found. Nothing removed."
    endif
endfunc

function! base16themechanger#ListCollectionNames()
    " Display names of available collections.
    echo join(g:base16themechanger#collection_names, "\n")
endfunc

function! base16themechanger#UpdateCollectionNameList()
    " Update global list of collection names.
    let g:base16themechanger#collection_names = sort(keys(g:base16themechanger#collections))
endfunc

function! base16themechanger#ListCollections() 
    " Print list of available collections.
    for collection_name in sort(keys(g:base16themechanger#collections))
        let l:collection = g:base16themechanger#collections[collection_name]
        echo collection_name . ": " . join(l:collection, ", ")
    endfor
endfunc

function! base16themechanger#SelectNextCollection()
    " Select the next collection in alphabetical order
    let l:collection_size = len(g:base16themechanger#collection_names)
    let l:collection_index = index(g:base16themechanger#collection_names, g:base16themechanger#current_collection_name)
    "echo "Current collection_index: " . l:collection_index
    "echo "Collection size: " . l:collection_size

    " index found
    if l:collection_index != -1
        "echo "collection names: " . join(g:base16themechanger#collection_names, ", ")
        let l:next_index = l:collection_index + 1
        if l:next_index >= l:collection_size
            let l:next_index = 0
        endif
        "echo "next index: " . l:next_index
        let l:next_collection_name = g:base16themechanger#collection_names[l:next_index]
        "echo "next collection: " . l:next_collection_name
        call g:base16themechanger#SelectCollection(l:next_collection_name)
        echom "Selected collection: " . l:next_collection_name . ": " . join(g:base16themechanger#collections[l:next_collection_name], ", ")
    endif
endfunc

" Set up theme collections
let s:default_collections = {
    \ 'tomorrow': ['tomorrow', 'tomorrow-night'],
    \ 'summerfruit': ['summerfruit-light', 'summerfruit-dark'],
    \ 'solarized': ['solarized-light', 'solarized-dark']
\ }

" use current values, otherwise use default values
let g:base16themechanger#collections = get(g:, "base16themechanger#collections", s:default_collections)
let g:base16themechanger#current_collection_name = get(g:, "base16themechanger#current_collection_name", "tomorrow")
call base16themechanger#UpdateCollectionNameList()

" Feedback after sourcing.
silent echom "base16themechanger.vim sourced."

" vim: set fdm=indent
